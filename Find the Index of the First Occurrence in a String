/**
 * Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.
 * @param {string} haystack
 * @param {string} needle
 * @return {number}
 */
var strStr = function(haystack, needle) {
    // Base case: needle is an empty string
    if (needle === "") {
        return 0;
    }

    // Helper function to check if the substring starting at a given index matches needle
    function isMatch(index) {
        for (let i = 0; i < needle.length; i++) {
            if (haystack[index + i] !== needle[i]) {
                return false;
            }
        }
        return true;
    }

    // Recursive function to find the first occurrence of needle
    function findOccurrence(index) {
        // Base case: remaining part of haystack is shorter than needle
        if (index + needle.length > haystack.length) {
            return -1;
        }

        // Check if the substring starting at the current index matches needle
        if (isMatch(index)) {
            return index;
        }

        // Recursive case: move to the next index in haystack
        return findOccurrence(index + 1);
    }

    // Start the recursive search from index 0
    return findOccurrence(0);
};

// Example usage
const haystack = "hello";
const needle = "ll";

const result = strStr(haystack, needle);

console.log(result); // Output: 2
